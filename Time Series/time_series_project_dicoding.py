# -*- coding: utf-8 -*-
"""TIME SERIES PROJECT DICODING

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hqQGV60va21VIrQ_iE_EfXw2krYfmq3Y

**DATA DIRI**

**NAMA : MUHAMMAD ISMAIL**

**DOMISILI : SURABAYA, JAWA TIMUR**

**TIME SERIES PROJECT**
"""

import tensorflow as tf
#mengecek version dari tensorflow
tf.__version__

"""**EKSTRAKSI FILE**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from keras.preprocessing.sequence import TimeseriesGenerator
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from datetime import datetime, date

!pip install kaggle

#mengupload API key akun kaggle
from google.colab import files
files.upload()

# membuat directory dari kaggle.json
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

#download dataset
!kaggle datasets download -d berkeleyearth/climate-change-earth-surface-temperature-data

# unzip dan lihat list dataset
!mkdir climate-change-earth-surface-temperature-data
!unzip climate-change-earth-surface-temperature-data.zip -d TemperatureData

"""**MEMBUAT DATAFRAME**

"""

#mengubah file csv yang didapatkan ke dataframe
#penambahan sep='\t' memudahkan mesin untuk membaca dataframe dan menghindari eror
df = pd.read_csv('TemperatureData/GlobalLandTemperaturesByCountry.csv')

df.head(10)

df.tail(10)

df.isnull().sum()

df.info()

#menghilangkan nilai NaN
mean_AverageTemperature = df.AverageTemperature[246308:248572].mean()
mean_AverageTemperatureUncertainty = df.AverageTemperatureUncertainty[246308:248573].mean()
df = df.fillna(value={'AverageTemperature':mean_AverageTemperature, 
                 'AverageTemperatureUncertainty':mean_AverageTemperatureUncertainty})

mean_AverageTemperatureUncertainty

mean_AverageTemperature

"""**VISUALISASI DATA**"""

data = df.loc[(df.Country == 'Indonesia')]
 data

Visual_AverageTemperature = data.drop(columns=['AverageTemperatureUncertainty', 'Country'])
Visual_AverageTemperature

Visual_AverageTemperature.iloc[692:1693].plot(title='Rata-rata Temperatur Harian Indonesia',figsize=(14,6))
plt.ylabel('Temperature',fontsize=12)
plt.xlabel('Date',fontsize=12)
plt.legend()

"""**MEMBUAT MODEL DAN MENGSCALE DATA**"""

data = Visual_AverageTemperature.loc[(Visual_AverageTemperature.dt >= '1825-01-01') & (Visual_AverageTemperature.dt <= '2013-09-01'), ['dt', 'AverageTemperature']]
data.set_index('dt', inplace= True)
data

train_sample, test_sample = train_test_split(data.values, test_size=0.2, shuffle=False)

train_sample

test_sample

scaler = MinMaxScaler()
train_scale = scaler.fit_transform(train_sample.reshape(-1, 1))
test_scale = scaler.fit_transform(test_sample.reshape(-1, 1))

train_scale.shape

split=int((1-0.2)*len(data))

date_train = data.index[:split]
date_test = data.index[split:]

len= 30
train_gen = TimeseriesGenerator(train_scale, train_scale, length=len, batch_size=20)     
test_gen = TimeseriesGenerator(test_scale, test_scale, length=len, batch_size=1)

#mengecek apakah masih ada null
data.isnull().sum()

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True, activation='relu', input_shape=(len, 1)),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dropout(0.25),
  tf.keras.layers.Dense(1),
])
model.summary()

#membuat callback agar menghentikan epoch bila akurasi sesuai dengan yang diinginkan
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < 0.1):
      print("\n Mean Absolute Error < 10%!")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit_generator(train_gen, 
                    epochs= 150, 
                    verbose=1, 
                    callbacks=[callbacks], 
                    steps_per_epoch = 2)

plt.plot(history.history['loss'])
plt.plot(history.history['mae'])
plt.title('Prediction')

plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')

plt.show()

pred = scaler.inverse_transform(model.predict_generator(test_gen))

plt.figure(figsize=(20,4))
plt.plot(date_train, train_sample, label = "Train_sample")
plt.plot(date_test[:-len], pred, label = "Prediction From Test_sample")
plt.title('Rata-Rata Temperatur di Indonesia')

plt.xlabel('Selang Waktu',fontsize=15)
plt.ylabel('Rata-rata Temperatur dalam CÂ°',fontsize=15)
plt.legend()
plt.show()